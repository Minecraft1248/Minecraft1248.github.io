{"title":"使用std::any在一个变量中存储任意类型的值","uid":"c7d3b952c43c4d1d37f371080088b081","slug":"使用stdany在一个变量中存储任意类型的值","date":"2022-02-26T03:52:24.000Z","updated":"2022-02-26T03:53:37.847Z","comments":true,"path":"api/articles/使用stdany在一个变量中存储任意类型的值.json","keywords":"Minecraft1248","cover":null,"content":"<h1 id=\"使用stdany在一个变量中存储任意类型的值\"><a class=\"markdownIt-Anchor\" href=\"#使用stdany在一个变量中存储任意类型的值\"></a> 使用std::any在一个变量中存储任意类型的值</h1>\n<h2 id=\"0stdany简介\"><a class=\"markdownIt-Anchor\" href=\"#0stdany简介\"></a> 0.std::any简介</h2>\n<p><code>std::any</code>是一种在C++ 17标准中被加入的值类型,其变量在可以更改其类型的同时保持类型安全性.同时<code>std::any</code>不需要在初始化时提供其值可能的类型.换句话说,<code>std::any</code>可以存储任意类型的值,并且还限制了对其的类型转换以保证类型安全.</p>\n<p>在获取<code>std::any</code>中所存储的值时,需要用到<code>std::any_cast&lt;variable_type&gt;(any_variable)</code>以获取其中存储的值.并且<code>std::any</code>存储的值类型可以在运行时使用<code>type()</code>成员函数来获取.注意<code>std::any</code>的值是使用衰减类型存储的,即存数组时转换为指针,忽略顶层引用和const.在存储字符串常量时要尤其注意这一点.</p>\n<p>使用<code>std::any</code>时,需要包含<code>&lt;any&gt;</code>头文件,并且要将编译器的语言标准设置为C++ 17及以上.</p>\n<h2 id=\"1stdany使用实例\"><a class=\"markdownIt-Anchor\" href=\"#1stdany使用实例\"></a> 1.std::any使用实例</h2>\n<p>下面给出了一个 <code>std::any</code>的使用案例.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;any&gt;\n#include&lt;iostream&gt;\n#include&lt;string&gt;\n\nusing namespace std;\n\nint main() &#123;\n    any a1;    &#x2F;&#x2F;create an empty any variable without initialize\n    any a2 &#x3D; 1.5;    &#x2F;&#x2F;create an any variable with value 1.5 any double type\n\n    a1 &#x3D; true;    &#x2F;&#x2F;a1 has value true and bool type  \n    a2 &#x3D; string(&quot;TEST_STR&quot;);    &#x2F;&#x2F;a2 has value &quot;TEST_STR&quot; and std::string type\n    \n    if(a1.type() &#x3D;&#x3D; typeid(string)) &#123;\n        string s;\n        try &#123;\n            s &#x3D; any_cast&lt;string&gt;(a1);    &#x2F;&#x2F;try to get an string value\n        &#125; catch(bad_any_cast&amp; e) &#123;\n            cerr &lt;&lt; e.what() &lt;&lt; endl;\n        &#125;\n    &#125; \n\n    if(a1.type() &#x3D;&#x3D; typeid(int)) &#123;\n        int i;\n        try &#123;\n            i &#x3D; any_cast&lt;int&gt;(a1);    &#x2F;&#x2F;try to get an int value\n        &#125; catch(bad_any_cast&amp; e) &#123;\n            cerr &lt;&lt; e.what() &lt;&lt; endl;\n        &#125;\n    &#125; \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>std::any_cast&lt;&gt;</code>会在对象为空或所指类型不匹配时抛出<code>std::bad_any_cast</code>.因此,在不检查或不知道对象类型时最好用<code>try-catch</code>块处理此异常.</p>\n<p><code>std::any_cast&lt;&gt;</code>会创建一个用于传递值的临时对象用于初始化新对象,若在不需要初始化时(如只需要输出<code>std::any</code>对象的值时)要避免创建临时对象,可以传递一个引用类型作为模板参数:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">cout &lt;&lt; any_cast&lt;int&amp;&gt;(a1) &lt;&lt; endl;\nany_cast&lt;string&amp;&gt;(a1) &#x3D; &quot;TEST_STR_2&quot;;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>若对<code>std::any</code>对象的指针调用<code>std::any_cast&lt;&gt;</code>,在类型匹配时则返回相应类型的指针,若不匹配则返回<code>nullptr</code>.</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">auto ptr &#x3D; any_cast&lt;int&gt;(&amp;a1);\nif(ptr) &#123;\n    &#x2F;&#x2F;do something \n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>要清空一个<code>std::any</code>对象可以使用一下三种方法:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">if(!a.has_value()) &#123;    &#x2F;&#x2F;if a is not empty\n    a.reset();\n    a &#x3D; any&#123;&#125;;\n    a &#x3D; &#123;&#125;;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>std::any</code>与容器配合可以产生一个能够存储任意对象的容器:</p>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#include&lt;any&gt;\n#include&lt;iostream&gt;\n#include&lt;list&gt;\n\nusing namespace std;\n\nint main() &#123;\n    list&lt;any&gt; anylist;\n    string str &#x3D; &quot;TEST_STR&quot;;\n\n    anylist.push_back(12);\n    anylist.push_back(true);\n    anylist.push_back(str);\n\n    for(auto a : anylist) &#123;\n        if(a.type() &#x3D;&#x3D; typeid(string)) &#123;\n            &#x2F;&#x2F;do something\n        &#125;\n        if(a.type() &#x3D;&#x3D; typeid(bool)) &#123;\n            &#x2F;&#x2F;do something\n        &#125;\n        if(a.type() &#x3D;&#x3D; typeid(int)) &#123;\n            &#x2F;&#x2F;do something\n        &#125;\n    &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","feature":true,"text":" 使用std::any在一个变量中存储任意类型的值 0.std::any简介 std::any是一种在C++ 17标准中被加入的值类型,其变量在可以更改其类型的同时保持类型安全性.同时std::any不需要在初始化时提供其值可能的类型.换句话说,std::any可以存储任意类型的...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"Modern C++","slug":"Modern-C","count":1,"path":"api/categories/Modern-C.json"},{"name":"C++","slug":"Modern-C/C","count":1,"path":"api/categories/Modern-C/C.json"}],"tags":[{"name":"C++ 17","slug":"C-17","count":1,"path":"api/tags/C-17.json"},{"name":"std::any","slug":"std-any","count":1,"path":"api/tags/std-any.json"},{"name":"Modern C++","slug":"Modern-C","count":1,"path":"api/tags/Modern-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8stdany%E5%9C%A8%E4%B8%80%E4%B8%AA%E5%8F%98%E9%87%8F%E4%B8%AD%E5%AD%98%E5%82%A8%E4%BB%BB%E6%84%8F%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%80%BC\"><span class=\"toc-text\"> 使用std::any在一个变量中存储任意类型的值</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0stdany%E7%AE%80%E4%BB%8B\"><span class=\"toc-text\"> 0.std::any简介</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1stdany%E4%BD%BF%E7%94%A8%E5%AE%9E%E4%BE%8B\"><span class=\"toc-text\"> 1.std::any使用实例</span></a></li></ol></li></ol>","author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"《算法基础》学习笔记-排序算法测试源代码","uid":"edd55adac64d0984201add6954665563","slug":"Algorithm-Unlocked-Sort-Test-Source-Code","date":"2021-10-30T16:13:46.000Z","updated":"2021-10-30T16:15:45.770Z","comments":true,"path":"api/articles/Algorithm-Unlocked-Sort-Test-Source-Code.json","keywords":"Minecraft1248","cover":"https://s3.bmp.ovh/imgs/2021/10/5bcb09e1b9a4aeb0.jpg","text":"#include&lt;iostream&gt; #include&lt;cstdlib&gt; #include&lt;ctime&gt; #include&lt;vector&gt; #define INF 0x7FFFFFFF using namespace std; in...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"算法基础","slug":"算法基础","count":3,"path":"api/categories/算法基础.json"},{"name":"Algorithms Unlocked","slug":"算法基础/Algorithms-Unlocked","count":3,"path":"api/categories/算法基础/Algorithms-Unlocked.json"},{"name":"学习笔记","slug":"算法基础/Algorithms-Unlocked/学习笔记","count":3,"path":"api/categories/算法基础/Algorithms-Unlocked/学习笔记.json"}],"tags":[{"name":"Notes","slug":"Notes","count":3,"path":"api/tags/Notes.json"},{"name":"Sort","slug":"Sort","count":3,"path":"api/tags/Sort.json"},{"name":"排序算法","slug":"排序算法","count":2,"path":"api/tags/排序算法.json"}],"author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"feature":true}}