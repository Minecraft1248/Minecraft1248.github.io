{"title":"详解C++ 20标准中的module(模块)","uid":"14ddd0e5c45607d8ee4621c2813a9657","slug":"详解C++20标准中的module(模块)","date":"2022-03-12T02:38:02.000Z","updated":"2022-03-12T06:20:02.207Z","comments":true,"path":"api/articles/详解C++20标准中的module(模块).json","keywords":"Minecraft1248","cover":null,"content":"<h1 id=\"详解c-20标准中的module模块\"><a class=\"markdownIt-Anchor\" href=\"#详解c-20标准中的module模块\"></a> 详解C++ 20标准中的module(模块)</h1>\n<h2 id=\"0c模块简介前言\"><a class=\"markdownIt-Anchor\" href=\"#0c模块简介前言\"></a> 0.C++模块简介&amp;前言</h2>\n<p>在开始C++模块的介绍之前,首先来看这样一段代码:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这是一段简单到不能再简单的Hello World,整份代码共计不超过100字,但是关键在于这段代码中使用了<code>cout</code>从而<code>#include&lt;iostream&gt;</code>,导致了<strong>预处理器会完整地将<code>&lt;iostream&gt;</code>头文件替换至源代码中,并且还会继续扫描并处理新增加的<code>#include</code></strong>,从而导致编译器真实处理的字符数实际上有上万字,甚至上百万字.</p>\n<p>而这一切,不过是使用了一个<code>cout</code>而引发的结果.</p>\n<p>很难想象,在一个Hello World的编译中就已经是这样了,编译Chromium这种大型项目时需要处理的代码数只会更加恐怖.</p>\n<p>~~不能否认的是,C<ins>的这种编译方式曾在C</ins>程序员的工作中,起到非常摸鱼的作用(指在编译时划水).~~但这种原始的代码替换方式也极大地拖慢了C<ins>的编译速度,并且还使C</ins>代码难以组件化,无法代码隔离等.</p>\n<p>实际上,C<ins>标委会早就发现了这些问题,并在2007年逐步开展了研究工作,但是毕竟是标委会,进度非常缓慢.直到2018年C</ins>标委会才以微软提供的方案确定了最终草案,并在C++ 20标准中引入了模块.(官网介绍:<a href=\"http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p1103r3.pdf\">P1103R3提案</a>)</p>\n<p>通常可以认为,一个程序是由一组翻译单元(Translated units)组合而成,这些翻译单元在没有额外信息下是相互独立的,要将翻译单元联系在一起就需要为这些翻译单元声明外部名称,编译器和链接器就可以使用这些外部名称将独立的翻译单元组合在一起.而模块就可以认为是一个或一组独立的翻译单元和一组外部名称的组合体.模块名(Module name)就是引用这个组合体的符号,模块单元(Module unit)就是组合体的翻译单元,模块接口单元(Module interface unit)就是组合体的一组外部名称.</p>\n<p>一个模块由模块单元组成,模块单元分为模块接口单元和模块实现单元(Module implement unit).一个模块可以有多个模块分区以方便模块代码的组织,模块分区也是模块单元.对于每个模块,必须有一个没有分区的模块接口单元,该模块单元称为主模块接口单元(Primary Module Interface Unit).导入一个模块,实际上就是导入主模块的接口.</p>\n<p></p>\n<h2 id=\"1c模块术语\"><a class=\"markdownIt-Anchor\" href=\"#1c模块术语\"></a> 1.C++模块术语</h2>\n<table>\n<thead>\n<tr>\n<th>中文翻译</th>\n<th>英语原文</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>模块单元</td>\n<td>Module Unit</td>\n</tr>\n<tr>\n<td>模块名</td>\n<td>Module Name</td>\n</tr>\n<tr>\n<td>模块接口单元</td>\n<td>Module Interface Unit</td>\n</tr>\n<tr>\n<td>模块实现单元</td>\n<td>Module Implement Unit</td>\n</tr>\n<tr>\n<td>主模块接口单元</td>\n<td>Primary Module Interface Unit</td>\n</tr>\n<tr>\n<td>私有模块片段</td>\n<td>Private Module Fragment</td>\n</tr>\n<tr>\n<td>全局模块片段</td>\n<td>Global Module Fragment</td>\n</tr>\n<tr>\n<td>模块分区</td>\n<td>Module Partition</td>\n</tr>\n<tr>\n<td>子模块</td>\n<td>Submodule</td>\n</tr>\n<tr>\n<td>可见性</td>\n<td>Visible</td>\n</tr>\n<tr>\n<td>可达性</td>\n<td>Reachable</td>\n</tr>\n<tr>\n<td>模块链接属性</td>\n<td>Module Linkage</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"2c模块语法\"><a class=\"markdownIt-Anchor\" href=\"#2c模块语法\"></a> 2.C++模块语法</h2>\n<p>下面这段代码使用<code>module</code>关键字定义了一个名为<code>MyModule</code>的模块单元:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>注意,该模块无法做为主模块接口单元,要让一个模块成为主模块接口单元,必须在<code>module</code>前加上<code>export</code>关键字:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如此声明的<code>MyModule</code>即成为一个主模块接口单元.在定义模块名后,就可以开始使用<code>export</code>关键字导出指定名称了.</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mymodule.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">c</span> <span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">namespace</span> ns <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>  \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当然,也可以在<code>export</code>后跟大括号以批量导出名称,则上面的代码可以改写成:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mymodule.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">c</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">DoSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">namespace</span> ns <span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>  \n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从上述两段代码可以得知,<code>export</code>关键字能导出的有变量(当然也可以是常量),函数,类以及命名空间.其他源文件可以使用<code>import</code>关键字来导入这些名称:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//importmodule.cpp</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> ns<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>运行完上述代码后,i的值为1,注意没有使用<code>export</code>关键字导出的名称对模块外不可见(也就是无法访问).</p>\n<p>对于已经模块化的头文件(哪些头文件已经模块化暂时取决于编译器),也可以使用<code>import</code>导入:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//importheaders.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">Print</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\"><span class=\"token string\">&lt;iostream></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Msg : \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述代码运行后会输出&quot;Msg : 1&quot;.</p>\n<p>注意,在模块中使用头文件时应尽量使用<code>import</code>,否则会导致<code>#include</code>在模块内的头文件成为模块的一部分.</p>\n<p>如果要使用的头文件没有模块化并且一定要在模块中使用该头文件的话,一般有两种方式:</p>\n<p>1.<code>import</code>该头文件,并调整设置,让编译器在编译时自动将该头文件模块化(因编译器而异).</p>\n<p>2.在全局模块片段中<code>#include</code>该头文件:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">module</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">Print</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>注意上述代码的第一行的<code>module</code>后直接跟了引号,则从<code>module;</code>至<code>export module MyModule;</code>这两行代码之间称之为全局模块片段,其中的所有代码都会被隐式转换至一个称之为&quot;全局模块&quot;的模块中,从而规避<code>#include</code>头文件所导致的模块包含该头文件内容的问题.</p>\n<p>特别需要注意的是,<code>import</code>的头文件/模块内容不会被<code>#define</code>所影响,这时候就可以在全局模块片段中<code>#include</code>该头文件并定义相关宏.</p>\n<p>与全局模块片段相对应的是私有模块片段:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//privatemodulefragment.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//export something...</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\n<span class=\"token keyword\">module</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">private</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从上述代码最后的<code>module : private;</code>开始,至该文件结束,称之为私有模块片段,该片段中的所有符号均仅在该模块中可见.</p>\n<p>注意,标准规定,私有模块片段只能出现在主模块接口单元中,并且具有私有模块片段的模块单元应是其模块的唯一模块单元.</p>\n<p>当然,与传统的header/source相似,模块的声明与实现也可以分开,此时前者称之为模块接口单元,后者称之为模块实现单元:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//interface.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//implement.cpp</span>\n<span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>类似的是,模块接口单元中的宏定义对于模块实现单元来说不可见.</p>\n<p>当数个模块具有从属关系时,可以使用子模块:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mainmodule.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MainModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">import</span> <span class=\"token module\">MainModule<span class=\"token punctuation\">.</span>Submodule1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">import</span> <span class=\"token module\">MainModule<span class=\"token punctuation\">.</span>Submodule2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">import</span> <span class=\"token module\">MainModule<span class=\"token punctuation\">.</span>Submodule3</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//submodule1.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MainModule<span class=\"token punctuation\">.</span>Submodule1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//submodule2.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MainModule<span class=\"token punctuation\">.</span>Submodule2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//submodule3.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MainModule<span class=\"token punctuation\">.</span>Submodule3</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//main.cpp</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\">MainModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> c <span class=\"token operator\">=</span> <span class=\"token function\">f3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>需要注意的是,子模块名称中的&quot;.&quot;仅仅是为了表示主模块与子模块之间的从属关系而存在,其本身也属于模块名的一部分,换句话说,形如<code>MainModule.Submodule</code>这样的模块名只是给人看的,在编译器看来,<code>MainModule</code>和<code>MainModule.Submodule</code>是两个毫不相干的模块.</p>\n<p>上述主模块中的语句<code>export import ...;</code>也可适用于将其他模块的符号经由此模块导出的场景.</p>\n<p>如果模块内容很多,在一个文件中可能放不下,这时候可以使用模块分区来对模块代码做逻辑上的分割:</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//mymodule.ixx</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">import</span> <span class=\"token module\"><span class=\"token operator\">:</span>part1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\"><span class=\"token operator\">:</span>part2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">part1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">part2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//part1.ixx</span>\n<span class=\"token keyword\">module</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule<span class=\"token operator\">:</span>part1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">void</span> <span class=\"token function\">part1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Part1\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">part1_private</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//part2.ixx</span>\n<span class=\"token keyword\">module</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">module</span> <span class=\"token module\">MyModule<span class=\"token operator\">:</span>part2</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token module\"><span class=\"token operator\">:</span>part1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">void</span> <span class=\"token function\">part2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Part2\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">part1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在主模块接口单元中使用<code>export import ...;</code>来导出相应模块分区,如果不需导出则可以去掉<code>export</code>.</p>\n<p>注意,同模块之间的片段相互引用不需要加上主模块的名称,直接使用冒号+模块分区名即可.外部引用想要模块分区才需要使用主模块名+冒号+模块分区名的方式.</p>\n<p>完整的模块使用实例可以参考我的项目:<a href=\"https://github.com/Helium-DevTeam/Helium\">Helium</a></p>\n<h2 id=\"3c模块实现现状\"><a class=\"markdownIt-Anchor\" href=\"#3c模块实现现状\"></a> 3.C++模块实现现状</h2>\n<p>作者目前使用的MSVC编译器对模块的支持已经基本完善,但是还是存在头文件模块化程度不高,以及强行对头文件模块化会有bug之类的问题.甚至有时候会莫名其妙的报内部编译器错误这种让人摸不着头脑的错误.而且Visual Studio的Intellisense和Intellicode对模块的支持不完善,经常~~(总是)~~会有代码无法上色,自动补全等问题.</p>\n<p>不过使用模块所带来的编译速度提升也是相当明显,希望各大编译器厂商能够在C++ 23标准前为我们提供更加完善的C++模块使用体验.</p>\n","feature":true,"text":" 详解C++ 20标准中的module(模块) 0.C++模块简介&amp;前言 在开始C++模块的介绍之前,首先来看这样一段代码: #include&lt;iostream> using namespace std; int main() &#123; cout &lt;&lt...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"Modern C++","slug":"Modern-C","count":2,"path":"api/categories/Modern-C.json"},{"name":"C++","slug":"Modern-C/C","count":2,"path":"api/categories/Modern-C/C.json"}],"tags":[{"name":"C++ 20","slug":"C-20","count":1,"path":"api/tags/C-20.json"},{"name":"Module","slug":"Module","count":1,"path":"api/tags/Module.json"},{"name":"Modern C++","slug":"Modern-C","count":2,"path":"api/tags/Modern-C.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%AF%A6%E8%A7%A3c-20%E6%A0%87%E5%87%86%E4%B8%AD%E7%9A%84module%E6%A8%A1%E5%9D%97\"><span class=\"toc-text\"> 详解C++ 20标准中的module(模块)</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#0c%E6%A8%A1%E5%9D%97%E7%AE%80%E4%BB%8B%E5%89%8D%E8%A8%80\"><span class=\"toc-text\"> 0.C++模块简介&amp;前言</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1c%E6%A8%A1%E5%9D%97%E6%9C%AF%E8%AF%AD\"><span class=\"toc-text\"> 1.C++模块术语</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2c%E6%A8%A1%E5%9D%97%E8%AF%AD%E6%B3%95\"><span class=\"toc-text\"> 2.C++模块语法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3c%E6%A8%A1%E5%9D%97%E5%AE%9E%E7%8E%B0%E7%8E%B0%E7%8A%B6\"><span class=\"toc-text\"> 3.C++模块实现现状</span></a></li></ol></li></ol>","author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"mapped":true,"prev_post":{},"next_post":{"title":"使用std::any在一个变量中存储任意类型的值","uid":"c7d3b952c43c4d1d37f371080088b081","slug":"使用stdany在一个变量中存储任意类型的值","date":"2022-02-26T03:52:24.000Z","updated":"2022-03-12T02:38:04.968Z","comments":true,"path":"api/articles/使用stdany在一个变量中存储任意类型的值.json","keywords":"Minecraft1248","cover":null,"text":" 使用std::any在一个变量中存储任意类型的值 0.std::any简介 std::any是一种在C++ 17标准中被加入的值类型,其变量在可以更改其类型的同时保持类型安全性.同时std::any不需要在初始化时提供其值可能的类型.换句话说,std::any可以存储任意类型的...","link":"","photos":[],"count_time":{"symbolsCount":"2.8k","symbolsTime":"3 mins."},"categories":[{"name":"Modern C++","slug":"Modern-C","count":2,"path":"api/categories/Modern-C.json"},{"name":"C++","slug":"Modern-C/C","count":2,"path":"api/categories/Modern-C/C.json"}],"tags":[{"name":"Modern C++","slug":"Modern-C","count":2,"path":"api/tags/Modern-C.json"},{"name":"C++ 17","slug":"C-17","count":1,"path":"api/tags/C-17.json"},{"name":"std::any","slug":"std-any","count":1,"path":"api/tags/std-any.json"}],"author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"feature":true}}