{"title":"《算法基础》学习笔记-线性搜索算法","uid":"2e4dd07c9efba521a4f50b17ccdbb5c4","slug":"Algorithm-Unlocked-Note-2021-10-29-linear-search","date":"2021-10-29T10:28:24.000Z","updated":"2022-02-26T03:51:41.744Z","comments":true,"path":"api/articles/Algorithm-Unlocked-Note-2021-10-29-linear-search.json","keywords":"Minecraft1248","cover":"https://s3.bmp.ovh/imgs/2021/10/5bcb09e1b9a4aeb0.jpg","content":"<h1 id=\"算法基础学习笔记\"><a class=\"markdownIt-Anchor\" href=\"#算法基础学习笔记\"></a> 《算法基础》学习笔记</h1>\n<h2 id=\"一线性搜索算法\"><a class=\"markdownIt-Anchor\" href=\"#一线性搜索算法\"></a> 一.线性搜索算法</h2>\n<p><em>《算法基础》在讲下列算法之前是在讲变量,循环等基础,而且我确信有点基础的人第一个想出来的线性搜索算法也应该是原书中BetterLinearSearch()这样的,故直接跳过</em></p>\n<h3 id=\"1betterlinearsearch\"><a class=\"markdownIt-Anchor\" href=\"#1betterlinearsearch\"></a> 1.BetterLinearSearch()</h3>\n<h4 id=\"c实现\"><a class=\"markdownIt-Anchor\" href=\"#c实现\"></a> C++实现:</h4>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#define NOT_FOUND -1\n\nint BetterLinearSearch(int* A, int n, int x) &#123;\n    for(int i &#x3D; 0; i &lt; n; i ++)\n        if(A[i] &#x3D;&#x3D; x) &#123;\n            return i;\n        &#125;\n    return NOT_FOUND;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"算法分析\"><a class=\"markdownIt-Anchor\" href=\"#算法分析\"></a> 算法分析:</h4>\n<p>​    从数组A的开头搜索到末尾,一旦搜索到x就直接返回,若没有搜索到x即返回NOT_FOUND.</p>\n<h4 id=\"运行时间\"><a class=\"markdownIt-Anchor\" href=\"#运行时间\"></a> 运行时间:</h4>\n<p>​    最好情况下为θ(1),最坏情况下为θ(n),此处不再证明.</p>\n<h3 id=\"2sentinellinearsearch\"><a class=\"markdownIt-Anchor\" href=\"#2sentinellinearsearch\"></a> 2.SentinelLinearSearch()</h3>\n<p>​    我们注意到BetterLinearSearch()中的循环每迭代一次就要执行<strong>2次比较</strong>:一次是检查是否找到x的,另一次是<strong>检查数组访问越界的</strong>,我们可以就此入手,<strong>将A[n-1]替换为x</strong>,故程序<strong>总能</strong>在A中找到x并结束,并且只需要在i=n-1时额外检查是否真正找到了x.</p>\n<h4 id=\"c实现-2\"><a class=\"markdownIt-Anchor\" href=\"#c实现-2\"></a> C++实现:</h4>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">#define NOT_FOUND -1\n\nint SentinelLinearSearch(int* A, int n, int x)&#123;\n    int last &#x3D; A[n - 1], i &#x3D; 0;\n    A[n - 1] &#x3D; x;\n    while(A[i] !&#x3D; x) i ++; \n    A[n - 1] &#x3D; last;\n    if(i &#x3D;&#x3D; n - 1 &amp;&amp; last !&#x3D; x) return NOT_FOUND;\n    else return i;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"算法分析-2\"><a class=\"markdownIt-Anchor\" href=\"#算法分析-2\"></a> 算法分析:</h4>\n<p>​    SentinelLinearSearch()先保存A[n-1]的值并将x赋值给A[n-1],确保了执行到i=n-1时总有A[i]==x<strong>恒成立</strong>,则循环必定结束,此时只需要<strong>还原A[n-1]的值</strong>,并进行检查即可.其中,x被称为<strong>信号量</strong>.</p>\n<h4 id=\"运行时间-2\"><a class=\"markdownIt-Anchor\" href=\"#运行时间-2\"></a> 运行时间</h4>\n<p>​    最好情况下为θ(1),最坏情况下为θ(n),此处不再证明.</p>\n","text":" 《算法基础》学习笔记 一.线性搜索算法 《算法基础》在讲下列算法之前是在讲变量,循环等基础,而且我确信有点基础的人第一个想出来的线性搜索算法也应该是原书中BetterLinearSearch()这样的,故直接跳过 1.BetterLinearSearch() C++实现: #d...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"算法基础","slug":"算法基础","count":3,"path":"api/categories/算法基础.json"},{"name":"Algorithms Unlocked","slug":"算法基础/Algorithms-Unlocked","count":3,"path":"api/categories/算法基础/Algorithms-Unlocked.json"},{"name":"学习笔记","slug":"算法基础/Algorithms-Unlocked/学习笔记","count":3,"path":"api/categories/算法基础/Algorithms-Unlocked/学习笔记.json"}],"tags":[{"name":"Notes","slug":"Notes","count":3,"path":"api/tags/Notes.json"},{"name":"Sort","slug":"Sort","count":3,"path":"api/tags/Sort.json"},{"name":"线性搜索算法","slug":"线性搜索算法","count":1,"path":"api/tags/线性搜索算法.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0\"><span class=\"toc-text\"> 《算法基础》学习笔记</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E7%BA%BF%E6%80%A7%E6%90%9C%E7%B4%A2%E7%AE%97%E6%B3%95\"><span class=\"toc-text\"> 一.线性搜索算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#1betterlinearsearch\"><span class=\"toc-text\"> 1.BetterLinearSearch()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\"> C++实现:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90\"><span class=\"toc-text\"> 算法分析:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4\"><span class=\"toc-text\"> 运行时间:</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#2sentinellinearsearch\"><span class=\"toc-text\"> 2.SentinelLinearSearch()</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#c%E5%AE%9E%E7%8E%B0-2\"><span class=\"toc-text\"> C++实现:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%88%86%E6%9E%90-2\"><span class=\"toc-text\"> 算法分析:</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%90%E8%A1%8C%E6%97%B6%E9%97%B4-2\"><span class=\"toc-text\"> 运行时间</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"mapped":true,"prev_post":{"title":"《算法基础》学习笔记-排序算法测试源代码","uid":"edd55adac64d0984201add6954665563","slug":"Algorithm-Unlocked-Sort-Test-Source-Code","date":"2021-10-30T16:13:46.000Z","updated":"2021-10-30T16:15:45.770Z","comments":true,"path":"api/articles/Algorithm-Unlocked-Sort-Test-Source-Code.json","keywords":"Minecraft1248","cover":"https://s3.bmp.ovh/imgs/2021/10/5bcb09e1b9a4aeb0.jpg","text":"#include&lt;iostream&gt; #include&lt;cstdlib&gt; #include&lt;ctime&gt; #include&lt;vector&gt; #define INF 0x7FFFFFFF using namespace std; in...","link":"","photos":[],"count_time":{"symbolsCount":"6.3k","symbolsTime":"6 mins."},"categories":[{"name":"算法基础","slug":"算法基础","count":3,"path":"api/categories/算法基础.json"},{"name":"Algorithms Unlocked","slug":"算法基础/Algorithms-Unlocked","count":3,"path":"api/categories/算法基础/Algorithms-Unlocked.json"},{"name":"学习笔记","slug":"算法基础/Algorithms-Unlocked/学习笔记","count":3,"path":"api/categories/算法基础/Algorithms-Unlocked/学习笔记.json"}],"tags":[{"name":"Notes","slug":"Notes","count":3,"path":"api/tags/Notes.json"},{"name":"Sort","slug":"Sort","count":3,"path":"api/tags/Sort.json"},{"name":"排序算法","slug":"排序算法","count":2,"path":"api/tags/排序算法.json"}],"author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"feature":true},"next_post":{}}