{"title":"C++STL-迭代器的使用","uid":"da72cd54cfb983a621d1e371518b19d3","slug":"杂记-C++迭代器","date":"2021-11-06T09:17:54.000Z","updated":"2021-11-06T09:17:17.534Z","comments":true,"path":"api/articles/杂记-C++迭代器.json","keywords":"Minecraft1248","cover":null,"content":"<h1 id=\"cstl-迭代器的使用\"><a class=\"markdownIt-Anchor\" href=\"#cstl-迭代器的使用\"></a> C++STL-迭代器的使用</h1>\n<pre class=\"line-numbers language-c++\" data-language=\"c++\"><code class=\"language-c++\">vector&lt;int&gt;::iterator it;\t&#x2F;&#x2F;正向迭代器\nvector&lt;int&gt;::const_iterator cit;\t&#x2F;&#x2F;常量正向迭代器\nvector&lt;int&gt;::reverse_iterator rit;\t&#x2F;&#x2F;反向迭代器\nvector&lt;int&gt;::const_reverse_iterator crit;\t&#x2F;&#x2F;常量反向迭代器<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>​\t首先一定要注意,前面的<code>vector&lt;int&gt;</code>;<strong>尖括号中的类型不能省略</strong>.</p>\n<p>​\t迭代器用于访问容器中的元素,正向迭代器和反向迭代器的区别在于,对迭代器进行++操作时,<strong>正向迭代器指向容器中下一个元素,而反向迭代器是指向容器中的下一个元素</strong>.常量迭代器意味着你不能通过迭代器<strong>更改所指向元素的值</strong>,但是其迭代器<strong>本身的指向是可以更改的</strong>(类比指针的const),对迭代器变量使用<strong>指针降级运算符(即*)</strong>.</p>\n<p>​\t常用的迭代器有三种:</p>\n<p>​\t正向迭代器.假设p是一个正向迭代器,则p支持以下操作:<code>++p</code>，<code>p++</code>，<code>*p</code>.此外,两个正向迭代器可以互相赋值,还可以用<code>==</code>和<code>!=</code>运算符进行比较.</p>\n<p>​\t双向迭代器。双向迭代器具有正向迭代器的全部功能.除此之外,若p是一个双向迭代器,则<code>--p</code>和<code>p--</code>都是有定义的.<code>--p</code>使得 p 朝和<code>++p</code>相反的方向移动.</p>\n<p>​\t随机访问迭代器.随机访问迭代器具有双向迭代器的全部功能.若p是一个随机访问迭代器,i是一个整型变量或常量,则 p 还支持以下操作:</p>\n<ul>\n<li>p+=i:使得p往后移动i个元素.</li>\n<li>p-=i:使得p往前移动i个元素.</li>\n<li>p+i:返回p后面第i个元素的迭代器.</li>\n<li>p-i:返回p前面第i个元素的迭代器.</li>\n<li>p[i]:返回p后面第i个元素的引用.</li>\n</ul>\n<p>此外,两个随机访问迭代器p1,p2还可以用 &lt;,&gt;,&lt;=,&gt;= 运算符进行比较.<code>p1&lt;p2</code>的含义是:p1经过若干次(至少一次)<code>++</code>操作后，就会等于 p2。其他比较方式的含义与此类似。</p>\n<p>对于两个随机访问迭代器 p1,p2,表达式<code>p2-p1</code>也是有定义的,其返回值是p2所指向元素和p1所指向元素的序号之差(也可以说是p2和p1之间的元素个数减一).</p>\n","feature":true,"text":" C++STL-迭代器的使用 vector&lt;int&gt;::iterator it; &#x2F;&#x2F;正向迭代器 vector&lt;int&gt;::const_iterator cit; &#x2F;&#x2F;常量正向迭代器 vector&lt;int&gt...","link":"","photos":[],"count_time":{"symbolsCount":973,"symbolsTime":"1 mins."},"categories":[{"name":"C++STL","slug":"C-STL","count":2,"path":"api/categories/C-STL.json"}],"tags":[{"name":"Notes","slug":"Notes","count":8,"path":"api/tags/Notes.json"},{"name":"STL","slug":"STL","count":2,"path":"api/tags/STL.json"},{"name":"C++","slug":"C","count":4,"path":"api/tags/C.json"},{"name":"iterator","slug":"iterator","count":1,"path":"api/tags/iterator.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#cstl-%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\"> C++STL-迭代器的使用</span></a></li></ol>","author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"mapped":true,"prev_post":{"title":"杂记-常见排序算法实现及其浅析","uid":"7b96841ab300f1a32883b72d5fd4ae72","slug":"常见排序算法实现及浅析","date":"2021-11-06T10:16:59.000Z","updated":"2021-11-06T02:57:14.894Z","comments":true,"path":"api/articles/常见排序算法实现及浅析.json","keywords":"Minecraft1248","cover":null,"text":" 常见排序算法实现及浅析 一.比较排序 1.交换排序 冒泡排序 C++实现 算法描述 快速排序 C++实现 int Partition(int* A, int p, int r)&#123; int q &#x3D; p; for(int u &#x3D; p; u &lt; r...","link":"","photos":[],"count_time":{"symbolsCount":"2.6k","symbolsTime":"2 mins."},"categories":[{"name":"学习笔记","slug":"学习笔记","count":1,"path":"api/categories/学习笔记.json"}],"tags":[{"name":"Notes","slug":"Notes","count":8,"path":"api/tags/Notes.json"},{"name":"Sort","slug":"Sort","count":5,"path":"api/tags/Sort.json"},{"name":"排序算法","slug":"排序算法","count":4,"path":"api/tags/排序算法.json"},{"name":"C++","slug":"C","count":4,"path":"api/tags/C.json"}],"author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"feature":true},"next_post":{"title":"Helium项目简介","uid":"c556e014e1cd2aeced9fbf030f4918f6","slug":"helium-project-introduction-2021-10-9","date":"2021-10-09T15:51:59.000Z","updated":"2021-10-09T17:16:58.749Z","comments":true,"path":"api/articles/helium-project-introduction-2021-10-9.json","keywords":"Minecraft1248","cover":"https://s3.bmp.ovh/imgs/2021/10/c6091162b41668f1.png","text":" Helium项目简介 一.什么是Helium ​ Helium是一个由Fallen-Breath/MCDReforged项目所启发的,由C++编写的Minecraft服务端控制工具.与MCDR类似的是,Helium同样不需要对Minecraft服务端进行修改即可提供一个可自定义...","link":"","photos":[],"count_time":{"symbolsCount":816,"symbolsTime":"1 mins."},"categories":[{"name":"Helium","slug":"Helium","count":2,"path":"api/categories/Helium.json"}],"tags":[{"name":"Helium","slug":"Helium","count":2,"path":"api/tags/Helium.json"},{"name":"Github","slug":"Github","count":2,"path":"api/tags/Github.json"}],"author":{"name":"Minecraft1248","slug":"blog-author","avatar":"https://s3.bmp.ovh/imgs/2021/10/89a7ea01b14a6553.jpg","link":"/","description":"Helium项目开发人员lol","socials":{"github":"https://github.com/Minecraft1248","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{"bilibili":{"icon":"/svg/bilibili.svg","link":"https://space.bilibili.com/270016803"}}}},"feature":true}}